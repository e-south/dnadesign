# configs/example.yaml



cruncher:
  mode: parse
  motif:                    # ← universal
    root:  ../dnadesign-data/motifs
    formats:                # optional override per file-ext
      .meme: MEME
      .pfm:  JASPAR
    plot:
      logo:      true
      bits_mode: information   # or "probability"
      dpi: 200
  sample:                    # ← used only by `cruncher sample`
    pairs:   [[crp, fis], [crp, ihf]]
    optimiser:
      kind: gibbs
      gibbs:
        draws: 80000
        tune:  20000
        beta:  2.0
        chains: 4
        cores: 4
        min_dist: 4
    top_k: 200
    out_dir: results/
  analysis:                  # ← used only by `cruncher analyse`
    runs:   []               # default = MOST_RECENT batch
    plots:
      - score_kde
      - scatter_pwm
      - logo_elites




latdna:
  mode: analysis  # Set to "analysis" when running analysis
  dry_run: false    # true for dry run (no files written)
  # Generation Mode Settings
  dense_array_for_generation: densebatch_test
  sequence_length: 120
  gc_content_range: [0.4, 0.6]
  seed: 42
  fixed_elements:
    upstream_seq: "TTGACA"
    downstream_seq: "TATAAT"
    upstream_start: 70
    spacer_range: [16, 18]
  tiling:
    step: 1
  motifs:
    crp: 
      - "AACCGTGCTCCCACTCGCAGTC"
      - "ATTGGTGAGGAACTTAACAATA"
    arca: "ATGTTAATAAAATGTTAA" # DAP-seq
    lrp: "AATAACAGAATAAAATGCTGA" # DAP-seq
    gadx: "AAAATATCAAAATCAGATAT"
    iclr: "CGGAAACAATTTCCATTTT" # DAP-seq
    arac: "AGGGGCGAATTATCTCTT"
    gadw: "AAGTCGTTTTTCTGCTTAG"
    rob: "GTTTTAGCATTTTGTGCTTTT" # DAP-seq
    fadr: "TGGTCAGACCTGTTC" # DAP-seq
    gals: "GTGTAAACGATTCCAC"
    galr: "CTGTAACCGTTTCCAT"
    yiau: "AAAAACAATATGTCGTTAT"
    torr: "TGTCAATATCTGTTCATATCT" # DAP-seq
    gade: "ATAGGCGTTTACTATATTGA"
    dcur: "AAATTAATAATTAAGGG"
    mlc: "ATTTTGATCTGCGAAATTAA" # DAP-seq
    rutr: "TTTGACCATTTGGTC" # DAP-seq
    fliz: "AAATTTGACTTAAGT" # DAP-seq
    rbsr: "CGAAACGTTTCGCT" # DAP-seq
    pepa: "ATTTGGTCCACTTTTTTCTGCTCGTTT"
    glcc: "GGTCCTACCTGTGCA"
  # Analysis Mode Settings (used when mode is "analysis")
  analysis_inputs:
    dense_batch: densebatch_test
    latdna_batch: latdnabatch_20250405
    seq_batch: 
      - seqbatch_ecocyc_28_promoters
      - densebatch_deg2tfbs_pipeline_tfbsfetcher_heterotypic_all_TFs_n2500
      - densebatch_deg2tfbs_pipeline_tfbsfetcher_heterotypic_M9_gluc_ace_top20_n2500
      - densebatch_deg2tfbs_pipeline_tfbsfetcher_monotypic_ArcA_n2500
      - densebatch_deg2tfbs_pipeline_tfbsfetcher_monotypic_CRP_n2500
      - densebatch_deg2tfbs_pipeline_tfbsfetcher_monotypic_Lrp_n2500
  metrics:
    # - cosine
    # - log1p_cosine
    - sqrt_cosine
    # - euclidean
    - log1p_euclidean
  group_by: all  # Options: "all" or "tf"
  plots:
    boxplot: true
    save_path: "plots/latdna_analysis_20250405.png"
    xtic_labels:
      - "dense_test"
      - "latdna"
      - ecocyc_28
      - hetero_all_TFs
      - hetero_ace_top20
      - mono_ArcA
      - mono_CRP
      - mono_Lrp


libshuffle:
  # I/O paths
  input_pt_path: "densebatch_deg2tfbs_pipeline_tfbsfetcher_heterotypic_M9_gluc_ace_top20_n10000_60bp"    # Directory with exactly one .pt
  output_dir_prefix: "acetate_60bp_draft"                    # batch_results/<prefix>_YYYYMMDD
  subsample_size: 16
  num_draws: 10000
  random_seed: 42
  with_replacement: false
  max_attempts_per_draw: 10
  evo2_metric_type: "cosine"                     # "l2", "log1p_l2", or "cosine"
  literal_filters:
    - "jaccard"
    - "levenshtein"
  selection:
    method: "max_min_latent"
    latent_threshold:
      type: "iqr"
      factor: 1.5
  billboard_core_metrics:
    - tf_richness
    - 1_minus_gini
    - min_jaccard_dissimilarity
    - min_tf_entropy
    - min_motif_string_levenshtein
    - min_nw_dissimilarity
  # Which subsamples to save (IDs), in addition to the winner
  save_selected: true
  save_sublibraries: []                            # e.g. ["s_0001", "s_0010"]
  plot:
    scatter:
      x: "mean_cosine"
      y: "log1p_mean_euclidean"
      # x: "mean_cosine"
      # y: "log1p_mean_euclidean"
      low_alpha: 0.25
      high_alpha: 0.45
      threshold_line: true
      threshold:
        type: "iqr"
        factor: 1.5
      colors:
        base: purple
        literal_drop:
          jaccard: orange
          levenshtein: red
          literal: red
        cluster_drop: orange
        winner: purple
      annotate_winner: true
      annotate_ids: true
      figsize: [5, 5]
    kde:
      figsize: [5, 5]
    pairplot:
      figsize: [8, 8]
    hitzone:
      figsize: [3, 6]


billboard:
  output_dir_prefix: 60bp_acetate_sub6783
  dry_run: false
  skip_aligner_call: true
  pt_files:
    # - densebatch_deg2tfbs_pipeline_tfbsfetcher_heterotypic_M9_gluc_ace_top20_n10000_60bp
    - sub6793
  allow_variable_sequence_length: false
  include_fixed_elements_in_combos: false
  save_plots: true
  save_csvs: true
  dpi: 600

  # List which metrics end up in diversity_summary.csv
  diversity_metrics:
    - tf_richness
    - 1_minus_gini
    - min_jaccard_dissimilarity
    - min_tf_entropy
    - min_motif_string_levenshtein
    - min_nw_dissimilarity

  motif_string_levenshtein:
    tf_penalty: 1.0
    strand_penalty: 0.5
    partial_penalty: 0.8

  characterize_by_leiden_cluster:
    enabled: true
    plot_title: "Cluster Characterization by Core Metrics"
    marker_shapes:
      1_minus_gini: "s"
      min_jaccard_dissimilarity: "X"
      min_tf_entropy: "D"




densegen:
  input_sources:
    # - type: "deg2tfbs_pipeline_tfbsfetcher"
    #   name: "heterotypic_all_TFs"
    #   path: "tfbsbatch_heterotypic_allTFs_EcoCyc28"
    - type: "deg2tfbs_pipeline_tfbsfetcher"
      name: "heterotypic_M9_gluc_ace_top20"
      path: "tfbsbatch_heterotypic_M9_gluc_ace_top20"
    # - type: "deg2tfbs_pipeline_tfbsfetcher"
    #   name: "monotypic_CRP"
    #   path: "tfbsbatch_monotypic_CRP"
    # - type: "deg2tfbs_pipeline_tfbsfetcher"
    #   name: "monotypic_ArcA"
    #   path: "tfbsbatch_monotypic_ArcA"
    # - type: "deg2tfbs_pipeline_tfbsfetcher"
    #   name: "monotypic_Lrp"
    #   path: "tfbsbatch_monotypic_Lrp"
  output_dir: "sequences"
  progress_file: "progress_status.yaml"
  solver: "GUROBI"
  diverse_solution: true
  solver_options:
    - "Threads=16"
    - "TimeLimit=10"
  quota: 10000
  sequence_length: 60
  subsample_over_length_budget_by: 120
  # subsample_size: 20  # legacy
  round_robin: true
  arrays_generated_before_resample: 10  
  fixed_elements:
    promoter_constraints:
      - name: "sigma70_consensus"
        upstream: "TTGACA"
        downstream: "TATAAT"
        spacer_length: [16, 18]
        upstream_pos: [10, 40]
      # - name: "sigma70_consensus_+"
      #   upstream: "TTGACA"
      #   downstream: "TGTATAATGCT"
      #   spacer_length: [14, 16]
      #   upstream_pos: [10, 100]
      # - name: "sigma70_consensus_-"
      #   upstream: "TTGACA"
      #   downstream: "TCTATAATGAG"
      #   spacer_length: [14, 16]
      #   upstream_pos: [10, 100]
      # - name: "sigma70_mid"
      #   upstream: "ACCGCG"
      #   downstream: "ACCTAA"
      #   spacer_length: [16, 18]
      #   upstream_pos: [10, 100]
      # - name: "sigma70_low"
      #   upstream: "GCAGGT"
      #   downstream: "CCTCGC"
      #   spacer_length: [16, 18]
  unique_tf_only: true
  fill_gap: true
  fill_gap_end: "5prime"
  fill_gc_min: 0.40
  fill_gc_max: 0.60

evoinference:
  data_sources:
    - dir: seqbatch_hernandez_et_al_positive
  evo_model:
    version: "evo2_7b"
    save_pooled_only: true
    output_types:
      - type: "logits"
        pooling:            # Optional key for pooling
          method: "mean"
          dim: 1
      # - type: "embeddings"
      #   layers: ["blocks_26_mlp_l3"]
    overwrite_existing: false
    checkpoint_every: 100


clustering:
  batch_name: "60bp_acetate"
  input_sources:
    # - dir: "densebatch_test"
    - dir: "sub6793"
    - dir: densebatch_deg2tfbs_pipeline_tfbsfetcher_heterotypic_M9_gluc_ace_top20_n10000_60bp
    # - dir: "densebatch_deg2tfbs_pipeline_tfbsfetcher_monotypic_ArcA_n2500"
    # - dir: "densebatch_deg2tfbs_pipeline_tfbsfetcher_monotypic_CRP_n2500"
    # - dir: "densebatch_deg2tfbs_pipeline_tfbsfetcher_monotypic_Lrp_n2500"
    # - dir: "latdnabatch_20250405"
    # - dir: "seqbatch_ecocyc_28_promoters"
  method: "input_source"
  add_meta_cluster_count: true
  update_in_place: true
  leiden_resolution: .8
  cluster_selection:
    num_files: 0
    order: "max"
    custom_clusters: []
  overlay_cluster_numbers: true
  umap:
    enabled: true
    plot_dimensions: [5, 5]
    alpha: 0.2
    one_hot_key: "sequence"
    # 'alpha' is deprecated when using highlight mode.
    # Instead, use background_alpha and background_size for background points,
    # and highlight_alpha and highlight_size for highlight points.
    hue:
      method: "highlight"              # Options: "leiden", "gc_content", "seq_length", "numeric", "input_source", "highlight", "type", "intra_pairwise_similarity"
      numeric_hue: None
      normalization: "robust"                       
      background_alpha: 0.05
      background_size: 2.0
      highlight_alpha: 0.8
      highlight_size: 16.0
      # highlight_dirs must be a subset of input_sources.
      highlight_dirs:
        - "sub6793"
  output_prefix: "clusterbatch_"
  analysis:
    cluster_composition: true
    cluster_composition_plot_dimensions: [14, 4]
    diversity_assessment: true
    diversity_assessment_plot_dimensions: [10, 4]
    differential_feature_analysis: true
    intra_cluster_similarity: true
  resolution_sweep:
    enabled: false
    min: 0.1
    max: 1
    step: 0.05
    replicates: 1
    random_seeds: [42]

nmf:
  batch_name: "densebatch_deg2tfbs_pipeline_tfbsfetcher_m9_acetate_tfs_n10000_subsample20_diverse"
  k_range: [2, 36]
  n_init: 10
  max_iter: 1000
  init: "nndsvdar"
  solver: "cd"
  loss: "frobenius"
  # Set encoding_mode to "positional_bins" to activate the new approach.
  encoding_mode: "positional_bins"
  positional_binning:
    enable: true        # Enable positional binning mode.
    num_bins: 10        # Number of bins to divide each sequence.
  max_motif_occupancy: 5
  strand_aware: false
  normalize_coefficients: true
  clip_h_max: 3.0
  best_k: 12
  regularization:
    enable: true
    type: "l2"
    alpha: 0.01
  plots:
    generate_heatmaps: true
    generate_motif_occurrence_heatmap: true
    generate_program_association_barplot: true
    generate_sequence_program_decomposition: false
    generate_motif_barplots: true
    generate_elbow_plot: true
    generate_riverplot: true
    generate_stability_plots: true
    generate_signature_stability_riverplot: true
  clustering:
    enable_w_clustering: true
    linkage_method: "ward"
  diagnostics:
    max_top_tfs: 10
    barplot_ncols: 4
    pick_representative_for_stackplot: true
    n_sequences_for_stackplot: 1000
  diversity_score:
    enable: true
    alpha: 0.5
    plot_across_k: true
  stability_metrics:
    enable: true
    metrics: ["frobenius", "amari", "cv", "silhouette_sum", "silhouette_mean", "cophenetic"]
    similarity_threshold: 0.6
    min_common_tfs: 3
    optimal_k_selection_method: "elbow"


densehairpins:
  batch_name: "repromin_tfs_all_tfbs_subsample20_arrays10"
  run_post_solve: true
  consensus_only: false
  random_subsample_per_solve: true
  solver: "CBC"
  solver_options:
    - "Threads=16"
    - "TimeLimit=50"
  sequence_length: 30
  quota: 10
  subsample_size: 20
  analysis_style: "aggregate"  # Options: "per_batch" or "aggregate"
  target_batch: "repromin_tfs_all_tfbs_subsample200"  # Only needed for per_batch mode
  score_weights:
    silenced_genes: 1
    induced_genes: 1
    tf_diversity: 2 


tfkdanalysis:
  batch_name: "araC_and_pspF"
  # regulators: ["araC", "lacI", "rbsR", "rhaS", "rhaR", "cra", "malT", "treR", "xylR", "galR", "galS", "argR", "trpR", "metJ", "marR", "marA", "soxR", "soxS", "rob", "oxyR", "pspF", "cpxR", "lexA", "phoB", "cueR", "flhC", "csgD", "slyA", "sdiA", "rcdA", "mcbR", "arcA"] # "metR"
  regulators: ["araC", "lacI", "argR", "marR", "marA", "soxR", "soxS", "rob", "pspF", "cpxR", "lexA", "phoB", "cueR", "arcA"]
  media: "glu"
  volcano_plot: true
  volcano_point_size: null  # Options include: 'DAP Fold change (peak intensity/background intensity)', etc.
  threshold: "1.2"
  tolerate_nas: true
  annotate_operon: true


# Future section for seqpermuter (to be defined later)