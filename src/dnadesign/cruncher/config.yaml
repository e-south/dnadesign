# dnadesign/cruncher/config.yaml

cruncher:
  # GLOBAL SETTINGS
  mode: sample-analyse                      # “parse” | “sample” | “analyse” | “sample-analyse”
  out_dir: results/                         # relative path under cruncher/ where batches go
  regulator_sets:                           # each entry is a list of TF names
    - [lexA, soxR]

  # PARSE MODE (sanity‐check PWMs, draw logos, print log‐odds)
  parse:
    formats:                                # map file‐extension → parser name (MEME, JASPAR, …)
      .txt: MEME
      .pfm: JASPAR
    plot:
      logo: true                            # whether to generate a logo (PNG) per PWM
      bits_mode: information                # “information” (bits) vs “probability” mode
      dpi: 200                              # resolution for output PNG

  # SAMPLE MODE (MCMC‐based sequence search)
  sample:
    bidirectional: true                     # scan both strands (forward + reverse)
    penalties:
      same_pwm_extra_hit: 0.5               # λ penalty for duplicate hits

    init:
      kind: random                          # “random” | “consensus” | “consensus_mix”
      length: 35                            # overall length of the output sequence (must be ≥ 1)
      pad_with: background                  # “background” (uniform-random pad) or “A”|“C”|“G”|“T”
      regulator: soxR                       # If kind == “consensus”, supply a regulator name that exists in regulator_sets

    draws: 5000                              # number of MCMC draws (after tune)
    tune: 0                                 # number of burn‐in sweeps
    chains: 6                               # number of parallel chains (Gibbs or PT); set 14 for pt
    min_dist: 5                             # Hamming‐distance threshold for “diverse elites”
    top_k: 25                               # how many top sequences to save
    pwm_sum_threshold: 1.50                 # keep (raw_llr/consensus_llr) ∈ (0, 2] (two TFs ⇒ max sum = 2).
    include_consensus_in_elites: true       # whether to include the consensus sequence in the output elites list


    # Move‐kernel parameters
    moves:
      block_len_range: [10, 24]              # contiguous block proposals ∈ [5,25] bp
      multi_k_range:   [6, 18]              # number of disjoint flips ∈ [2,8] sites
      slide_max_shift: 12                    # maximum shift for “slide” moves (reserved)
      swap_len_range:  [2, 12]               # length of blocks to swap ∈ [8,20] (reserved)

      move_probs:
        S: 0.34                             # probability of a single‐base‐flip move
        B: 0.33                             # probability of a contiguous block replacement
        M: 0.33                             # probability of a multi‐site flip (k sites)

    optimiser:
      kind: gibbs                             # “gibbs” | “pt”
      scorer_scale: llr                    # “llr" | "z" | “logp” | "consensus-neglop-sum"

      # GIBBS (LINEAR‐RAMP COOLING) BUILT‐IN
      cooling:
        kind: linear                        # "fixed" | “linear” | “geometric” (geometric is for PT only)
        beta: [1e-6, 1e-3]                  # [β_start, β_end]

      # If kind == “pt”, uncomment & use the block below instead:
      # cooling:
      #   kind: geometric
      #   beta: [1.0, 0.8, 0.64, 0.512, 0.41, 0.328,
      #         0.262, 0.21, 0.168, 0.134, 0.107,
      #         0.086, 0.069, 0.05]  # length must match the number of chains

      swap_prob: 0.65                       # intra‐chain block‐swap probability (Gibbs); inter‐chain exchange prob (PT)
      softmax_beta: 0.20                    # only used by PT (must be a positive float)

    save_sequences: true                    # whether to write sequences.csv for downstream analysis

  # ANALYSIS MODE
  analysis:
    runs:                                   # list of batch names to re‐analyse
      - sample_cpxR-soxR_20250604
    plots:
      trace:       true                     # plot MCMC trace
      autocorr:    true                     # plot autocorrelation
      convergence: true                     # convergence diagnostics
      scatter_pwm: true                     # PWM‐score scatter (requires gathered_per_pwm.csv)
    scatter_scale: llr
    scatter_style: edges                    # “edges” | “thresholds”
    subsampling_epsilon: 100                # minimum E‐dist Δ in per‐TF‐score space for plotting edge connections in scatter