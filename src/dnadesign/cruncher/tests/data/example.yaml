# configs/example.yaml

cruncher:
  mode: sample                    # parse | sample | analyse
  out_dir: results/               # where all outputs land
  regulator_sets:                 # list of regulator sets to use   
    - [cpxR, soxR]                # set #1: two TFs
    # - [crp, fis, ihf]           # set #2: three TFs
  motif:                          # parse-specific config
    formats:
      .txt: MEME
      .pfm:  JASPAR
    plot:
      logo:      true
      bits_mode: information
      dpi:       200
  sample:
    bidirectional: true           # score sequences based on both forward and reverse-complement (take max per-PWM)
    init:
      kind: random                    # random, consensus_shortest, consensus_longest, or integer length 
      pad_with: background_pwm    # background (uniform iid), background_pwm (sample i.i.d. from overall PWM base frequencies)
    optimiser:
      kind: gibbs
      gibbs:
        draws:    400           # recorded Gibbs sweeps; each produces one full-sequence sample
        tune:     0           # “burn-in” Gibbs sweeps not recorded—allows chain to move toward high-probability region
        beta:     0.01            # higher β sharpens acceptance toward higher‐score sequences
        block_size: 5             # how many adjacent sites to update in one Gibbs move
        swap_prob:  0.5           # probability of doing an MH substring-swap instead of block-Gibbs
        chains:   4               # independent Gibbs chains to assess convergence
        cores:    4
        min_dist: 1               # minimum Hamming distance between final reported elites (diversity constraint)
    top_k: 200                    # number of unique, diverse sequences to return
    plots:
      trace:       true
      autocorr:    true
      convergence: true
      scatter_pwm: true
  analysis:                       # analysis-specific config
    runs: []                      # default = most recent sample
    plots:
      - score_kde
      - scatter_pwm
      - logo_elites
